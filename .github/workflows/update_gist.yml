name: Update YouTube Live List

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install --upgrade yt-dlp

      - name: Prepare cookies (Netscape format)
        env:
          COOKIES_CONTENT: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_CONTENT" ]; then
            echo "$COOKIES_CONTENT" > cookies.txt
          fi

      - name: Normalize channels.txt line endings
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
          else
            echo "channels.txt bulunamadı!"
            exit 1
          fi

      - name: Read channels and build live.m3u
        run: |
          set -e
          echo "#EXTM3U" > live.m3u

          while IFS=',' read -r CHANNEL_HANDLE DISPLAY_NAME QUALITY; do
            # skip empty or comment lines
            if [ -z "$CHANNEL_HANDLE" ] || echo "$CHANNEL_HANDLE" | grep -qE '^\s*#'; then
              continue
            fi

            # ensure handle starts with @
            if [[ "$CHANNEL_HANDLE" != @* ]]; then
              CHANNEL_HANDLE="@${CHANNEL_HANDLE}"
            fi

            YT_URL="https://www.youtube.com/${CHANNEL_HANDLE}/live"

            if [ -f cookies.txt ]; then
              OUT=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            else
              OUT=$(yt-dlp --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            fi

            if echo "$OUT" | grep -q "True"; then
              VID=$(echo "$OUT" | awk '{print $2}')
              echo "#EXTINF:-1,${DISPLAY_NAME} [${QUALITY}]" >> live.m3u
              echo "$VID" >> live.m3u
              echo "FOUND: ${DISPLAY_NAME} -> $VID"
            else
              echo "NOT LIVE: ${DISPLAY_NAME}"
            fi

          done < channels.txt

          # clean cookies
          if [ -f cookies.txt ]; then
            rm -f cookies.txt
          fi

          # if empty, write notice
          if [ ! -s live.m3u ]; then
            echo "#EXTM3U" > live.m3u
            echo "# No live streams found." >> live.m3u
          fi

      - name: Update Gist (via curl)
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          if [ -z "$GIST_ID" ] || [ -z "$GIST_TOKEN" ]; then
            echo "GIST_ID veya GIST_TOKEN eksik, Gist güncellenemiyor."
            exit 0
          fi

          # Escape live.m3u content to a JSON string safely using python
          CONTENT_JSON=$(python3 -c "import json,sys; print(json.dumps(open('live.m3u', 'r', encoding='utf-8').read()))")

          PAYLOAD="{\"files\": {\"live.m3u\": {\"content\": $CONTENT_JSON}}}"

          # Patch the gist
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X PATCH \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${PAYLOAD}" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist update HTTP status: $HTTP_STATUS"
