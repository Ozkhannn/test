name: Update YouTube Live List

on:
  schedule:
    # Her 15 dakikada bir çalıştır
    - cron: "*/15 * * * *"
  workflow_dispatch: {} # Manuel çalıştırma izni

# Sadece checkout için okuma izni yeterli
permissions:
  contents: read
  # Gist güncelleme, GIST_TOKEN ile yapılacağı için 'gist' iznine gerek yok,
  # ancak bazı durumlarda bu izin gerekebilir. Gist Token izni olduğu sürece bu kısım yeterli.

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        # jq, JSON çıktısını güvenli bir şekilde ayrıştırmak için eklendi.
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install --upgrade yt-dlp requests

      - name: Prepare Cookies (optional)
        env:
          COOKIES_B64: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_B64" ]; then
            echo "$COOKIES_B64" | base64 -d > cookies.txt
            echo "YouTube çerez dosyası (cookies.txt) oluşturuldu."
          else
            echo "YT_COOKIES secret'ı bulunamadı, çerez kullanılmayacak."
          fi

      - name: Normalize channels.txt line endings
        # Windows (CRLF) satır sonlarını Linux (LF) uyumlu hale getirir
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
            echo "channels.txt normalize edildi."
          else
            echo "channels.txt bulunamadı, işlem atlandı."
          fi

      - name: Read Channels and Update Live List
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -e

          if [ ! -f channels.txt ]; then
            echo "❌ channels.txt bulunamadı! Lütfen repoya ekleyin."
            exit 1
          fi

          echo "#EXTM3U" > live.m3u
          echo "Canlı yayınlar kontrol ediliyor..."

          # Her satırı okur: CHANNEL_HANDLE, DISPLAY_NAME, QUALITY
          while IFS=',' read -r CHANNEL_HANDLE DISPLAY_NAME QUALITY; do
            # Boş satırları ve yorum satırlarını (# ile başlayan) atla
            [[ -z "$CHANNEL_HANDLE" || "$CHANNEL_HANDLE" =~ ^# ]] && continue

            # Eğer HANDLE '@' ile başlamıyorsa ekle (YouTube handle formatı)
            [[ "$CHANNEL_HANDLE" != @* ]] && CHANNEL_HANDLE="@${CHANNEL_HANDLE}"

            YT_URL="https://www.youtube.com/${CHANNEL_HANDLE}/live"

            # yt-dlp'yi çalıştır, sadece JSON çıktısı al ve is_live kontrolü yap.
            # stderr (uyarılar) gizlenir.
            if [ -f cookies.txt ]; then
              OUT=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download --print-json "$YT_URL" 2>/dev/null || echo "{}")
            else
              OUT=$(yt-dlp --no-warnings --skip-download --print-json "$YT_URL" 2>/dev/null || echo "{}")
            fi

            # JSON çıktısından is_live kontrolü ve URL alma (jq kullanılarak daha güvenli)
            # Eğer 'webpage_url' boşsa veya 'is_live' 'true' değilse atla.
            IS_LIVE=$(echo "$OUT" | jq -r 'select(.is_live) | .is_live' || true)
            ID=$(echo "$OUT" | jq -r 'select(.is_live) | .webpage_url' || true)

            if [ "$IS_LIVE" = "True" ] && [ -n "$ID" ]; then
              echo "✅ Canlı bulundu: ${DISPLAY_NAME} (${CHANNEL_HANDLE})"
              echo "#EXTINF:-1,${DISPLAY_NAME} [${QUALITY}]" >> live.m3u
              echo "$ID" >> live.m3u
            else
              echo "  Canlı yayın yok: ${DISPLAY_NAME} (${CHANNEL_HANDLE})"
            fi
          done < channels.txt

          # Çerez dosyasını temizle
          [ -f cookies.txt ] && rm -f cookies.txt || true

          # live.m3u sadece #EXTM3U içeriyorsa boş mesaj ekle
          if [ ! -s live.m3u ] || [ "$(wc -l < live.m3u)" -eq 1 ]; then
            echo "# No live streams found." >> live.m3u
            echo "Sonuç: Hiçbir canlı yayın bulunamadı."
          else
            echo "Sonuç: live.m3u başarıyla oluşturuldu."
          fi

          # Python ile Gist Güncelleme
          python3 - << 'PYCODE'
import os
import requests
import json

gist_id = os.environ.get("GIST_ID")
token = os.environ.get("GIST_TOKEN")

if gist_id and token:
    try:
        with open("live.m3u", "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        print("❌ live.m3u dosyası bulunamadı!")
        exit(1)

    data = {"files": {"live.m3u": {"content": content}}}
    
    # PATCH isteği ile Gist'i güncelle
    r = requests.patch(f"https://api.github.com/gists/{gist_id}",
                       headers={"Authorization": f"token {token}",
                                "Accept": "application/vnd.github.v3+json"},
                       data=json.dumps(data))
    
    if r.status_code == 200:
        print("✅ Gist başarıyla güncellendi (HTTP 200).")
    else:
        print(f"❌ Gist güncelleme hatası. Durum Kodu: {r.status_code}")
        print("Yanıt:", r.text)
else:
    print("⚠️ GIST_ID veya GIST_TOKEN secret'ları yok, Gist güncellenemedi.")
PYCODE
