name: Update YouTube Live List

on:
  schedule:
    - cron: "*/15 * * * *"   # her 15 dakikada bir
  workflow_dispatch: {}       # manuel tetikleme

permissions:
  contents: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install --upgrade yt-dlp requests

      - name: Prepare cookies (Netscape format)
        env:
          COOKIES_CONTENT: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_CONTENT" ]; then
            # Geçici dosya oluştur
            echo "$COOKIES_CONTENT" > cookies.txt
          fi

      - name: Normalize channels.txt line endings
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
          fi

      - name: Read channels and update Gist
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -e

          if [ ! -f channels.txt ]; then
            echo "channels.txt bulunamadı!"
            exit 1
          fi

          echo "#EXTM3U" > live.m3u

          while IFS=',' read -r CHANNEL_HANDLE DISPLAY_NAME QUALITY; do
            [[ -z "$CHANNEL_HANDLE" || "$CHANNEL_HANDLE" =~ ^# ]] && continue
            [[ "$CHANNEL_HANDLE" != @* ]] && CHANNEL_HANDLE="@${CHANNEL_HANDLE}"

            YT_URL="https://www.youtube.com/${CHANNEL_HANDLE}/live"

            if [ -f cookies.txt ]; then
              OUT=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            else
              OUT=$(yt-dlp --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            fi

            if echo "$OUT" | grep -q "True"; then
              ID=$(echo "$OUT" | awk '{print $2}')
              echo "#EXTINF:-1,${DISPLAY_NAME} [${QUALITY}]" >> live.m3u
              echo "$ID" >> live.m3u
            fi
          done < channels.txt

          # Cookies güvenli şekilde sil
          [ -f cookies.txt ] && rm -f cookies.txt || true

          if [ ! -s live.m3u ]; then
            echo "#EXTM3U" > live.m3u
            echo "# No live streams found." >> live.m3u
          fi

          # Python Gist update
          python3 - <<'PYCODE'
          import os
          import requests
          import json

gist_id = os.environ.get("GIST_ID")
token = os.environ.get("GIST_TOKEN")

if gist_id and token:
    with open("live.m3u") as f:
        content = f.read()
    data = {"files": {"live.m3u": {"content": content}}}
    r = requests.patch(
        f"https://api.github.com/gists/{gist_id}",
        headers={"Authorization": f"token {token}"},
        data=json.dumps(data)
    )
    print("✅ Gist update status:", r.status_code)
else:
    print("⚠️ GIST_ID veya GIST_TOKEN yok, Gist güncellenemedi.")
PYCODE
