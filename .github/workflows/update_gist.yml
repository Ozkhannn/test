name: Update YouTube Live List

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install --upgrade yt-dlp requests

      - name: Prepare cookies (Netscape format)
        env:
          COOKIES_CONTENT: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_CONTENT" ]; then
            echo "$COOKIES_CONTENT" > cookies.txt
          fi

      - name: Normalize channels.txt line endings
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
          else
            echo "⚠️ channels.txt bulunamadı!"
            exit 1
          fi

      - name: Build/Update live.m3u (parallel workers)
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -e

          # mevcut live.m3u içeriğini al
          EXISTING=$(curl -s -H "Authorization: token $GIST_TOKEN" \
            "https://api.github.com/gists/$GIST_ID" \
            | python3 -c "import sys,json; print(json.load(sys.stdin)['files']['live.m3u']['content'])" \
            || echo "#EXTM3U\n")
          echo "$EXISTING" > live.m3u

          process_channel() {
            CHANNEL_LINE="$1"
            IFS=',' read -r CHANNEL_HANDLE DISPLAY_NAME QUALITY <<< "$CHANNEL_LINE"

            if [ -z "$CHANNEL_HANDLE" ] || echo "$CHANNEL_HANDLE" | grep -qE '^\s*#'; then
              return
            fi

            [[ "$CHANNEL_HANDLE" != @* ]] && CHANNEL_HANDLE="@${CHANNEL_HANDLE}"

            if [ -f cookies.txt ]; then
              META=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download "https://www.youtube.com/${CHANNEL_HANDLE}/live" --print "%(is_live)s %(id)s" 2>/dev/null || true)
            else
              META=$(yt-dlp --no-warnings --skip-download "https://www.youtube.com/${CHANNEL_HANDLE}/live" --print "%(is_live)s %(id)s" 2>/dev/null || true)
            fi

            if echo "$META" | grep -q "True"; then
              VID_ID=$(echo "$META" | awk '{print $2}')
              QUALITY_NUM=${QUALITY%p}
              YTDLP_FORMAT="bestvideo[height<=${QUALITY_NUM}][protocol^=http]+bestaudio/best"

              if [ -f cookies.txt ]; then
                STREAM_URL=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download -f "$YTDLP_FORMAT" --get-url "https://www.youtube.com/watch?v=${VID_ID}" 2>/dev/null | head -n1 || true)
              else
                STREAM_URL=$(yt-dlp --no-warnings --skip-download -f "$YTDLP_FORMAT" --get-url "https://www.youtube.com/watch?v=${VID_ID}" 2>/dev/null | head -n1 || true)
              fi

              if [ -n "$STREAM_URL" ]; then
                # sadece kanal ismine bakarak güncelle
                if grep -q "$DISPLAY_NAME" live.m3u; then
                  awk -v name="$DISPLAY_NAME" -v url="$STREAM_URL" '
                    BEGIN {found=0}
                    /^#EXTINF:-1,/ {
                      if ($0 ~ name) {
                        print
                        getline
                        print url
                        found=1
                        next
                      }
                    }
                    {print}
                  ' live.m3u > live.tmp && mv live.tmp live.m3u
                else
                  echo "#EXTINF:-1,${DISPLAY_NAME} [${QUALITY}]" >> live.m3u
                  echo "$STREAM_URL" >> live.m3u
                fi
                echo "✅ FOUND: ${DISPLAY_NAME}"
              else
                echo "❌ NOT LIVE/STREAM NOT FOUND: ${DISPLAY_NAME}"
              fi

            else
              echo "❌ NOT LIVE: ${DISPLAY_NAME}"
            fi
          }

          export -f process_channel
          export GIST_ID GIST_TOKEN
          # Paralel çalıştır: 5 worker
          cat channels.txt | grep -vE '^\s*#' | xargs -n1 -P5 -I {} bash -c 'process_channel "$@"' _ {}

          [ -f cookies.txt ] && rm -f cookies.txt

          if [ ! -s live.m3u ]; then
            echo "#EXTM3U" > live.m3u
            echo "❌ No live streams found." >> live.m3u
          fi

      - name: Update Gist (via curl)
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          if [ -z "$GIST_ID" ] || [ -z "$GIST_TOKEN" ]; then
            echo "⚠️ GIST_ID veya GIST_TOKEN eksik, Gist güncellenemiyor."
            exit 0
          fi

          CONTENT_JSON=$(python3 -c "import json; print(json.dumps(open('live.m3u', 'r', encoding='utf-8').read()))")

          PAYLOAD="{\"files\": {\"live.m3u\": {\"content\": $CONTENT_JSON}}}"

          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X PATCH \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${PAYLOAD}" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "✅ Gist update HTTP status: $HTTP_STATUS"
