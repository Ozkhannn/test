name: Update YouTube Live List

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install --upgrade yt-dlp

      - name: Prepare cookies (Netscape format)
        env:
          COOKIES_CONTENT: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_CONTENT" ]; then
            echo "$COOKIES_CONTENT" > cookies.txt
          fi

      - name: Normalize channels.txt line endings
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
          else
            echo "channels.txt bulunamadÄ±!"
            exit 1
          fi

      - name: Read channels and build/update live.m3u
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -e

          # Fetch existing live.m3u from Gist, fallback if empty
          EXISTING=$(curl -s -H "Authorization: token $GIST_TOKEN" \
            "https://api.github.com/gists/$GIST_ID" \
            | python3 -c "import sys,json; print(json.load(sys.stdin)['files']['live.m3u']['content'])" \
            || echo "#EXTM3U\n")

          echo "$EXISTING" > live.m3u

          # Read channels.txt and process
          while IFS=',' read -r CHANNEL_HANDLE DISPLAY_NAME QUALITY; do
            if [ -z "$CHANNEL_HANDLE" ] || echo "$CHANNEL_HANDLE" | grep -qE '^\s*#'; then
              continue
            fi
            if [[ "$CHANNEL_HANDLE" != @* ]]; then
              CHANNEL_HANDLE="@${CHANNEL_HANDLE}"
            fi

            YT_URL="https://www.youtube.com/${CHANNEL_HANDLE}/live"
            if [ -f cookies.txt ]; then
              OUT=$(yt-dlp --cookies cookies.txt --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            else
              OUT=$(yt-dlp --no-warnings --skip-download "$YT_URL" --print "%(is_live)s %(webpage_url)s" 2>/dev/null || true)
            fi

            if echo "$OUT" | grep -q "True"; then
              VID=$(echo "$OUT" | awk '{print $2}')
              # Check if display_name exists in live.m3u
              if grep -qE "#EXTINF:-1,${DISPLAY_NAME} \[" live.m3u; then
                # Update existing link
                sed -i "/#EXTINF:-1,${DISPLAY_NAME} \[/!b;n;c\\$VID" live.m3u
              else
                # Append new channel
                echo "#EXTINF:-1,${DISPLAY_NAME} [${QUALITY}]" >> live.m3u
                echo "$VID" >> live.m3u
              fi
              echo "FOUND: ${DISPLAY_NAME} -> $VID"
            else
              echo "NOT LIVE: ${DISPLAY_NAME}"
            fi
          done < channels.txt

          # Clean cookies
          [ -f cookies.txt ] && rm -f cookies.txt

          # If live.m3u is empty, write notice
          if [ ! -s live.m3u ]; then
            echo "#EXTM3U" > live.m3u
            echo "# No live streams found." >> live.m3u
          fi
