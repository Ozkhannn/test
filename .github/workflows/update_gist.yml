name: Update YouTube Live List

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install --upgrade yt-dlp requests

      - name: Prepare cookies
        env:
          COOKIES_CONTENT: ${{ secrets.YT_COOKIES }}
        run: |
          if [ -n "$COOKIES_CONTENT" ]; then
            echo "$COOKIES_CONTENT" > cookies.txt
          fi

      - name: Normalize channels.txt
        run: |
          if [ -f channels.txt ]; then
            tr -d '\r' < channels.txt > channels_unix.txt
            mv channels_unix.txt channels.txt
          else
            echo "channels.txt bulunamadÄ±!"
            exit 1
          fi

      - name: Write Python update script
        run: |
          echo 'import yt_dlp' > update_live.py
          echo 'channels = []' >> update_live.py
          echo 'with open("channels.txt","r",encoding="utf-8") as f:' >> update_live.py
          echo '    for line in f:' >> update_live.py
          echo '        line=line.strip()' >> update_live.py
          echo '        if not line or line.startswith("#"): continue' >> update_live.py
          echo '        parts=[x.strip() for x in line.split(",",2)]' >> update_live.py
          echo '        if len(parts)!=3: continue' >> update_live.py
          echo '        handle,name,quality=parts' >> update_live.py
          echo '        if not handle.startswith("@"): handle="@"+handle' >> update_live.py
          echo '        channels.append((handle,name,quality))' >> update_live.py
          echo 'lines=open("live.m3u","r",encoding="utf-8").readlines()' >> update_live.py
          echo 'existing_links={}' >> update_live.py
          echo 'for i,line in enumerate(lines):' >> update_live.py
          echo '    if line.startswith("#EXTINF:"):' >> update_live.py
          echo '        display_name=line.split(",")[1].split(" [")[0].strip()' >> update_live.py
          echo '        if i+1<len(lines): existing_links[display_name]=i+1' >> update_live.py
          echo 'for handle,display_name,quality in channels:' >> update_live.py
          echo '    ydl_opts={"quiet":True,"skip_download":True}' >> update_live.py
          echo '    url=f"https://www.youtube.com/{handle}/live"' >> update_live.py
          echo '    with yt_dlp.YoutubeDL(ydl_opts) as ydl:' >> update_live.py
          echo '        try:' >> update_live.py
          echo '            info=ydl.extract_info(url,download=False)' >> update_live.py
          echo '            if info.get("is_live"):' >> update_live.py
          echo '                live_url=info.get("webpage_url")' >> update_live.py
          echo '                if display_name in existing_links:' >> update_live.py
          echo '                    lines[existing_links[display_name]]=live_url+"\\n"' >> update_live.py
          echo '                else:' >> update_live.py
          echo '                    lines.append(f"#EXTINF:-1,{display_name} [{quality}]\\n")' >> update_live.py
          echo '                    lines.append(live_url+"\\n")' >> update_live.py
          echo '        except Exception: pass' >> update_live.py
          echo 'open("live.m3u","w",encoding="utf-8").writelines(lines)' >> update_live.py

      - name: Merge/update live.m3u with existing Gist
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          set -e

          EXISTING=$(curl -s -H "Authorization: token $GIST_TOKEN" \
            "https://api.github.com/gists/$GIST_ID" \
            | python3 -c "import sys,json; print(json.load(sys.stdin)['files']['live.m3u']['content'])" \
            || echo "#EXTM3U\n")

          echo "$EXISTING" > live.m3u

          python3 update_live.py

          [ -f cookies.txt ] && rm -f cookies.txt

      - name: Update Gist
        env:
          GIST_ID: ${{ secrets.GIST_ID }}
          GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
        run: |
          if [ -z "$GIST_ID" ] || [ -z "$GIST_TOKEN" ]; then
            echo "GIST_ID veya GIST_TOKEN eksik."
            exit 0
          fi

          CONTENT_JSON=$(python3 -c "import json; print(json.dumps(open('live.m3u','r',encoding='utf-8').read()))")

          PAYLOAD="{\"files\":{\"live.m3u\":{\"content\":$CONTENT_JSON}}}"

          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X PATCH \
            -H "Authorization: token ${GIST_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${PAYLOAD}" \
            "https://api.github.com/gists/${GIST_ID}")

          echo "Gist update HTTP status: $HTTP_STATUS"
